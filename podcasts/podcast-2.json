{
  "podcast_details": {
    "podcast_title": "Python Bytes",
    "episode_title": "#348 JavaScript in Your Python",
    "episode_image": "https://pythonbytes.fm/static/img/podcast-theme-img_1400.webp",
    "episode_transcript": " Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds This is episode 348 recorded August 15th 2023 I'm Michael Kennedy and I'm Brian I can and Brian this episode is brought to everybody by us I think you might be making a more concrete case for that than other times today So but yeah, check out all of our courses Books things like that. It genuinely makes it possible for us to do this kind of stuff. So yeah We love doing it. But yeah, also, yeah Yeah also, and if you Want to be part of the live show and you're not watching live now Tuesdays at 11 I don't buy set FM slash live all the details there Brian. Let's kick it off. What's your first item? I actually it's I'm kind of on a packaging a little bit of a packaging thing. Okay. Okay Brett Cannon wrote an article called differentiating between writing down dependencies to use packages and for packages themselves It's kind of a big title, but here's the idea and I've been thinking about this also so I really there's requirements dot text files and Those are often used for applications and then there's but but this that was it was really when we had like that was either that Or setup that pie for packages and now we have pie project that tumble. So can't we just use that? Um, I mean I I kind of want to but it doesn't quite work that way You install dependencies with a pie project at Tomo by doing a Installing your package and you can install it like pip installed dot e I think Brett. Yeah, I've installed Dashie right and on the current directory or you can give it a local project directory and you can even do optional things like optional test dependencies and stuff and and I think I think when you do the Dashie it installs your your optional test dependencies also not sure but and I'm used to that because I do packages also But we still have the requirements dot text file. There really are four different things so Brett has talks about this a lot in here and Looking at why there's a there's a thing called like project dependencies and the project is really meant for Packaging. It's really meant just for pack the whole packaging system so that so that when you When you install something install a wheel it knows how to get packages from for it. That's it It's not supposed to be for applications. So really that's kind of the discussion around here around this article However, there's a couple ideas References also references back a Donald stuffed article in from 2013 about setup pie versus Requirements dot text but like I said that was set up top high the weight Maybe we could do something better Brett's consideration is maybe Maybe we could have some standard Something some other file that we could have I Personally, I have a I think that maybe we could expand pipe project. I really like the Toml thing so maybe we could either have a requirements dot Toml or Maybe we could have like instead of a project section of the Toml file. Maybe we could have Maybe an application section. Maybe that would work. Yeah, so yeah I think like a like a dev requirements even just in the pie project that Toml seems pretty straightforward to me Yeah, I mean I we we were in it I run into it in other places too like just in a get repo that has like a couple Python tools in it That people can install on their own, but they might have some requirements. How do you list those two stick? I'm applications. I mean requirements. Text is normally the thing that's used for For like Django app web applications and things like that So maybe requirements of text is fine, but I think perhaps I have is I have for my world I have requirements dot text which is like for the web apps and stuff That is what is required for the app to run without that Yeah, you can't make it go then I have requirements dash dev dot txt I've seen that pattern a lot and then to actually generate those I use pip tools and pip compile So I have requirements dot in and requirements dash dev dot in and then I can You know auto update all the dependencies and keep them in sync and yeah, that's how I do it these days but we're but now like let's even people with like Django or you know other things are using a private private project Tom also to store like their black Settings and things like that. So yeah Yeah, we're kind of using project Tom. Oh the pipe project Tomo for more things and I think maybe we could extend it for this Anyway, that's my hope. Yeah. So anyway, uh, what do you got for us? Well, let's let's monkey around a little bit with the python monkey with the python monkey. That's good That's so it is so this comes to us from created by will Pringle. I believe amongst others Let's see on the contributors here. Um There yeah, there we go. Yeah, so a bunch of folks that work on this project It's not super popular with only 276 stars, but I think it might be a pretty darn interesting Compatibility layer for Python. So what do I mean by that? So imagine I I'm you can look at this from two perspectives. So don't scoff at one if you prefer the other So imagine I'm a JavaScript developer and I've got a ton of cool JavaScript code that Not just for the web for an end But you know kind of in the node J it sends like a bunch of utilities or a bunch of libraries that that work and do Certain things right? Yeah, but I also have a python app and I'd like to somehow use those together So python monkey is a straight way to put it. It basically hosts Java JavaScript a full-on high performance JavaScript Jit compiled to almost native performance JavaScript engine inside of Python through pip install So if I wanted to use some of the JavaScript code I just write my Python application and for that function or that functionality I just import the job, you know first spider monkey or Python That's Python monkey and then I import the JavaScript files that you would use and then you just call them like Python functions Okay, or reverse I'm writing a Python application and you know one option to make like slow loops Go faster would be to write that in scython and scython is getting better with the scython 3 release that we discussed already previous episode but JavaScript because this thing the spider monkey JavaScript engine is the one that belief firefox uses does JIT compilation to Native code it basically is near native performance as well So if you'd like you could rewrite that part in typescript or JavaScript and run just that section and it uses Things like shared memory between JavaScript and Python So if you've got like a string or a list those are those are the same objects, which is pretty crazy Wow, at least for the strings. Okay, so Let's look at some examples. There's an article by will and no I will not log into you medium. You're partially evil. Okay, so here's article by By will here says look at let's look at some code examples All right so import Python monkey as PM and then you say PM eval and give it JavaScript code and boom it runs that that's one way What you can do maybe is more interesting is look at this I can say em dot eval and give it an anonymous JavaScript function and then what comes back not Evaluating it but just the thing to define the function in JavaScript Okay, then what comes back is an object that itself is a function. Okay, so that's pretty cool. Yeah Like and hold on there's two parts of this. So I've got a I've created a JavaScript function That's JIT compiled in spider monkey through this eval and what the I didn't say this part What the function takes is given a function it will call that function passing. Hello world to it Okay, the string. Hello world. Okay, so what you do is you create a function So what you do is you get the function back as a Python function and then they pass print it somehow Proxies the print function into the JavaScript space and then JavaScript calls the Python print which it then comes back to the console To the terminal. Well, okay, that's some deep integration, right? That's some pretty pretty wild stuff Let's see. What else can we do here? This pretty interesting I can say Given a JavaScript module like I described I can you know, here's a example It has a say hello export then you can just say PM dot require that JavaScript module and now you've got all the function All the export behavior from that JavaScript module, right? Which is cool Yeah, there's there's some more examples in here the other angle that's pretty interesting There's two more angles that are interesting because it uses spider monkey and spider monkey is awesome with WebAssembly It allows you to run an Untrusted wasm code from languages like C C++ and rust you can now basically do Any you can call any WebAssembly code as well that you'd like inside of your function now. We're getting interesting Yeah, it supports things like async and await using the async and await keywords to handle the callback nature of JavaScript like the The dot then type of deferreds and different things So you can just async and await those behaviors, right? Just await a WebAssembly call, which is pretty excellent Yeah, so there's a bunch of examples some pretty cool graphics here With Spock and Captain Kurgle in my mind to your mind my object to your dicks your dicks to my objects Pretty awesome there Another angle that is worth considering is this allows the entire Python data science stack to become accessible to JavaScript developers Right. Yeah, so if you if you want to use, you know the machine learning stuff if you want to use pandas or pollers Right, you just write your code and then you know do the integration here. And yeah, that's that's pretty much it It it finishes with some funny little pictures here of a Noah on the ark Got a python and a JavaScript which looks like a penguin then it has the python monkey the wolf What is that? What the heck is this? All right. Anyway, that's um, that's python monkey, which is I think Potentially interesting so with the with the WebAssembly and stuff you could potentially have like every other function in your system be Implemented by a different language I'm bored of uh, see c++ rust go What else do we want to write it in? Yeah, why not everything? Just make sure that your your application is only maintainable by you that'd be exactly like do you know how many compilers you need to do this? No, this is kind of fun to joke about but this does look pretty cool. So yeah, yeah, it does look pretty cool So, you know congrats to the folks there this maybe it'll go somewhere. We'll see. It's pretty interesting think Also, it's it's worth noting that there is Somewhere in here that there's a comparison to other things. So this apparently is not the only time Such a type of creation Has been attempted so it says there are other projects that already do javascript and python such as js2py Piv8 and metacall, but there's a bunch of different drawbacks or stuff This is this is why we created it basically in addition So js2py is implemented entirely in python, which sounds awesome except, you know V8 and spider monkey compiled a native code and run ultra fast Whereas, you know if you just run in python, it probably doesn't have any of those things, right? Yeah, um py v8 has a wrapper around google's v8 javascript engine, which is great But it's just super low level you just like talk directly to the javascript bits Which for things for example doesn't have async and await and finally metacall is extensible embeddable and interoperable But you've got to install a bunch of different run times outside of just pip install So anyway, people are going but it exists it it does but this apparently is why it exists like this Yeah, cool. Yeah, and john out in the audience says I I do this but going the other way using transcript Okay, interesting something else to something new to check out. Thanks john. I'll take that out. So all right over to you brian Uh, well, I just one more thing uh alvaro, uh Says, uh python monkey perfect for works on my machine certification There there is an official works on my machine certification if you have I know we talked about it before It's glorious. It comes with a sticker. I have your application code getting the latest version of any recent changes from other developers Periodally optional and not a requirement for certification launch the application Cause one code path in the code you're checking to be executed The preferred way to do this is with ad hoc manual testing You can omit this step if the code change is less than five lines or if in the developer's professional opinion The code cannot possibly result in an error check your code Into version control easier certified. Yeah, there we go. Two jokes in one episode. How that how about that? Awesome Well, we have a little bit more, uh some a little more humor, uh to add to it. So because uh I thought it was a serious article and it is it's just funny and weird. So Seth larsen wrote uh quirks of python packaging versioning package python package versioning. That's it Um, so we're used to well, we're kind of getting used to uh, the world where we all have semver like 1.2.3 And for semantic versioning, but we also have calendar versioning like 2023.6.1 and then there's stuff like you can add a pre-release suffix and things like that But it gets way weirder and fun. Um, so uh, and I have noticed this especially with github Like get github versioning. Sometimes people will do uh v versioning So there's v prefixes you can do and some I guess you can pull that into your uh, your python application version as well Why not? Um, so v versions are allowed Epic versions. Did you know about epic versions? I just learned about this. I don't think so. So it's um You can you can have a A versioning versioning You can have a a Exclamation point separating your epic from the rest of your version So this is so like one bang 2.0.0 would be epic one version 2.0.0 Um, I gotta tell you I already had a hard time deciding when the two or when the middle zero or the last zero changes If I put a number in front an exclamation point i'm gonna just lost. Yeah Apparently much decision too many decisions apparently some systems use colons for epics But python chose this is all based on python pep 440. Um, and uh the uh, yeah Apparently we chose the bang symbol or is that's bang right? Uh the exclamation point Um, so and that just kind of looks like a one if you did one bang one that would be hard to tell Uh local versions, uh, and is you can you can extend after you have versions you can have alphanumerics and uh other stuff Um, like, you know here plus I don't know if the plus is part of it. Anyway, uh, so after your normal version like 1.0.0. He has an example of plus ubuntu-1. Um, this gets normalized but uh, but uh, And luckily, but this is kind of nice for local It's local versions because pypi doesn't like it so pypi will not let you push up local versions to pypi which is probably right uh to local builds um long versions Apparently you can use the use the first 217 digits of pi and that works fine As is one of the digits. There's no limits Uh case insensitivity, uh, so yeah, okay, that's fine Um, it gets normalized lower or something so that you you know capital rc1 is The same as lowercase rc1. That's that's appropriate. Um Um, so pre-release i've seen i've actually used pre-release post. I don't know if I use pre I've seen pre and i've used post release occasionally Although it's so weird that people don't understand what's going on. So I don't do that anymore Um, but apparently pre post and dev are not mutually exclusive you can have but all three Uh allowed in one version Why would you do that? Um, so uh, and uh, yeah, no delimiters needed Um, there's just a lot of fun here Thanks. So implicit hyphens are allowed. So this is both the serious and non-serious. Oh implicit zeros are weird. So uh, you can you can if you have a Version 2.0.4 You can just keep adding a bunch of 0.0.0.0 and it works fine. It resolves to 2.0.4. That's awesome. Um, Um, I I definitely need to advertise some version say just just pick up 2.0.3.0.0.0.0 Yeah, it looks makes it sound tough like yeah, I mean in releases we've had anyway, uh, Totally totally fun articles. So thanks, Seth brian. Do you hear that? No, that's the sound of a million reg x is dying That are supposed to be scanning for the version string in your code Yeah, but maybe that's why python just crying out my python just has it as a string It's if you do dunder version equals it's a just a string. So yeah Um actual ask if you use c++ compiled code, so I guess native code That's like not part of just source only python It's your way to define which compiler you use in the versioning maybe that Ubuntu type variant that local version But you can't publish that right? Uh, you can't push it to pypi Yeah, I like that. But like for instance, um, it's hey, i'm not sure how this this relates to um, Like the wheel naming the wheel download naming thing. Yeah So I'm sure there's some metadata you could put in there All right, like you can do dunder version, right? You could just do dunder compiler and say, you know print that out and it'll tell you but it's not There's no standard that I can think of well, there's the uh, there is the the wheel standard Uh, I just don't remember where the link is your platform based right than compiler. Oh, right. It's not compiler based It's platform based. I mean the compiler's got to compile to the platform But it it doesn't say like use gcc versus llvm clang studio whatever right? Right? Yeah, and usually i'm just doing pure python. So I have all listed but the wheel anyway, exactly So exactly All right. Well with all that, um python monkeying around I could just barely stand it. Oh dear About bear type nice the bear metal type checker. Okay, so people know i'm a huge fan of types python type hints and all those things They're they're super super empowering and make the editors so much more helpful means you don't have to go into Um the documentation and go what does this take again? I know it takes an args here, but is args the dictionary? Is it a class? Is it a string? Is it an i what is it right like crazy stuff like that? Right? Yeah So types are awesome for conveying that information without asking go to the docs or some other place to figure it out However, what python type hints annotations generally don't do as the word hint would Indicate they don't require the hint you can use tools like mypy and mypy will say the typing looks Consistent or inconsistent but regardless of what it says when you run the code Whether or not the typing is consistent long as it actually still Semantically valid it's going to run even if you tell the types it takes a string But you really pass an int and it did plus to it But you know what you pass two integers and two strings and it still worked right? So the runtime version of typing in python is mostly absent right excluding things like python take and a few others So this bear type thing is a near zero cost Near real time pure python runtime type checker that makes runtime mismatches for typing runtime errors Interesting, okay, so you can say this sounds like a horrible idea and I will never touch it Please don't you know install the bear or you could say I come from a static language and this Dynamic typing business is freaking me out when we get a little closer Then you can have it I feel like this is the kind of thing that for little projects is completely useless But for huge projects, it may be it starts to become more valuable, right? Yeah, so if you just jump right into it you pip install bear type and then you can do things like Import the decorator and just put a decorator onto a function that has a type annotation or hint right there like that So here's one that says quote wigum and then it passes lines and the type declaration says lines is a list of stir And it returns none. Okay, so then if you just use this function pass it a list of strings. It just runs, right? Yeah, if however, though you pass it a list of bytes which kind of look like strings, but are not strings You get an exception that says parameter such and such and such um Violates the type first and it gives you the actual index in the list says list item zero with this value It's not a string because it's a b string which is really bytes, right? Yeah, it's pretty cool, right? Yeah, it is really cool and I uh, i'm kind of agreeing with alvaro, um said Maybe maybe running with the test suite and I was thinking maybe dynamically add these somehow uh, do you use the bear types during development and maybe Maybe take them off later if it but if it's really fast, um, yeah Yeah, i'll i'll comment on that in a second. Uh, they're also validators There's an is and an annotated validator if you want to be More restrictive maybe even then you might expect It's part of python, but it's not a commonly known part of the type ending thing So for example, I could define a new type using annotated called list of strings Okay, and it says um It has to be a list of strings as one part of the annotation and then another one is well If it's it has to be a non-empty set of strings is what they're trying to create here Okay, so it says if it's a list with a bunch of stuff the bunch of stuff has to be strings But it also can test that it's not falsy which would be the case when it's a just you know, zero length list so then you can annotate with that type and if you call with With regular somewhere you call it with a regular code is fine But if you call it with the empty list where it says a list of strings it says no No, it can't be an empty list. It has to be a non-empty list of strings. So there's like some pretty Crazy things that you can can do here. Um, yeah some other stuff you can check if you like, but yeah, it's I wanted to read this this introduction article here, which actually comes after all the examples Um, by the way, it also in order to run This whole bunch of times it took 33 microseconds, which is pretty incredible to test test this for like an array of tuples of arrays of What is that a million, you know 33 microseconds. So that's pretty fast actually Yeah, you still want to like compare it like your entire like some workflow compared to with or without so Yep. So let me read this. So if people are wondering what the heck is this? bare type brings rust and C++ inspired zero cost abstractions into the lawless world of dynamic typing Dynamically typed Python by enforcing type safety at the granular level of functions and methods against type hints standardized by the Python community in 01 non-amortized worst-case time with negligible constant factors. How about that? So when you ask what bare type is there's a good description Yeah, well, yeah, it's pretty cool and then there's a whole bunch of stuff about it But anyway, that that's bare type It looks pretty promising to me like the drawback of a lot of these think really is like well Now you're doing a bunch of checking for every little function call and it's super slow, but if it's fast enough, that's that's pretty cool Yeah, so a couple comments in the chat Mike Felder Doesn't identically include call by the identical includes call validators too. So i'm not sure how that I don't know if that's out of beta Last time I looked at it was still in like a testing Phase it may be out out though. I mean there's a ton of work that's happened on Pydantic it's all been redone. So I don't know the status of that. Maybe mike does okay and then also Is there a mypy plugin that does that? I don't I don't I wasn't aware that mypy could be used at runtime But I wasn't aware mypy could be used at runtime either but um, perhaps Yeah, anyway, but anyway, this this looks pretty you know, quite straightforward pretty useful You just do type ins you put app bare type on it and it it makes sure that it behaves Yeah, so trying to do what you were looking at. Sorry to do where you might want to turn it off in production But run it in testing which is reasonable. I don't see any mechanism for that. There may be yeah It's a decorator mechanism. So you could you could work around it if you needed to well You could just write a decorator that looks whether that setting is on or off and either returns the bare type wrap thing or the Direct function directly and it would be like zero runtime cost To once it's turned off because the function is replaced with itself Otherwise, it's replaced by the bare type decorated one, right? So you could you might have to write like 10 lines of python Then you got that feature, right? The other thing is how much of your code you really gonna want to throw bare type decorators around all over the place Yeah, that's a good point. Maybe just the boundary right? Yeah, the api level or something. Yeah, exactly. Exactly Cool. Yep. Anyway, there it is. Uh, and I suppose that's it for all of our items. That's Uh, what we got lined up for you anything else? Uh, some extras. I have I want me to go first You want to save yours or yeah, you go first. All right. I already got my screen up anyway. Okay. So first of all Congratulations, mike Falter who is right here in the audience. Yeah, and I mispronounced his last name. Sorry I'm hopefully I got it right you did I got it at mike the man on twitter Uh is the new safety and security engineer for pypi. That's awesome mike. Thank you so much Cool, clearly an area that needs lots of attention. So I just wanted to say welcome. Thanks for keeping us all safe out there and Excellent. Yeah, I got to hang out with mike a lot at python. So that's really pretty cool Yeah, super cool. Super cool. And then a couple quick announcements to two conferences for people Uh packaging con follow up on all of your items brian packaging con cool is happening Fully online. Uh, no, hold on. No, it's happening in berlin as hybrid So it's in berlin october 26 to 28 for all things packaging python people Rust people etc. So, um check that out and the cloud builders python conf is september 6 2023 that's put together by a ukrainian group and it's just online so people can check that out as well And speakers are they still have a call for proposals doesn't look like it. I think it's open. It's already all set for the Agenda, so people can check that out. It should be fun. Uh and onto your bigness. Okay. Well a couple um, uh Just a couple notes that I wanted to to mention Um, the august release of visual studio code has something i've been long awaiting It's an error tolerant pi test discovery. So what does this mean? It means you you've got and there's like some comments down here. Oh went too far Um, you have to turn it on right now, uh, but it's just in a setting Um, apparently some people have it on by default. Anyway, they should just turn it on. It's better. Um, but the Uh, the gist is if you've got like errors, uh in some of your code it used to not it used to just blow up Like let's say you've got a test suite But you also have like some old junk tests off in a side directory that you don't use anymore If they had import errors or syntax errors or whatever It would just blow up the whole thing and you couldn't get any tests to import now It's tolerant and it just turns off the it doesn't it doesn't import those tests that have import errors. That's great So you can still run the rest of the suite. So that's good. Um be kind of still kind of cool There's a couple things be kind of cool if it could tell you which ones have had errors instead of just making them disappear So that'd be neat. Uh, the other thing is guys pi test isn't capitalized though. You can kind of work on your capitalization non-capitalization Anyway, but discovery probably should be oh, yeah. Oh, yeah discovery should be oh, that's all right. That's that's tough Anyway, I always uh, i'm always unsure about my capitalization So formal to capitalize everything We're it's this time of year again. We got python 312 release candidate one. So Uh, we're in the release candidates for python 312. It's pretty exciting release candidate is a big deal though, right? It's we think this is the final version unless there's something gone wrong. Yeah, it's it's right out of beta Um, so anyway speaking of beta the big news for today is that i've got a python Testing with python bundle course up And i'm super excited about it. I'm working really hard. However, uh, it is in uh, Pre-release out pre-release beta. I don't know I made up some thing that early bird early bird sort of uh, Uh, so there's being a bird. Yeah, so what is going on? So there's it's the in the end it's going to be um, Actually, I wrote it. I included on here is a video That is got like, uh, welcome to the pre-release beta and what does that mean video so you can watch that. Um, the gist of it is is uh, the three sections of the book are going to go into three different courses, but the The pre-release right now that's for sale is a bundle of all that will be all three Uh, there's two chapters ready for um for the primary power for the first part And uh, but i'm just going to chug along and uh, people can jump in if they want I'm i'm doing it as a beta because the book itself really is better because of the beta program that I did when I was writing the book and i'd love to have people come in and uh, Let me know where things need a little polish and we can um, you know, we can fix it along the way I also am setting up a uh, Uh job or not a job board a discussion board for people to ask questions if they get stuck Uh, I really want to make sure everybody's successful in getting getting this up and running getting up and running in py test quickly So, uh totally excited about getting this done. Oh one more thing I set up. Um, Uh, I just just launched it last night But uh for python bites listeners, you can use the coupon code python bites with a y so and uh, Uh p i'm we'll just throw that in the show notes use python bites Uh with a y and you can get 20 discount now through the end of the 17th. So just a few days But uh, that's enough time to grab it. So cool. Yeah, awesome. Congrats on this brian. This will be exciting And I know it's a lot of work. So Yeah, good luck. Thanks Yeah, absolutely. Oh, you know what else is a lot of work and ties back to my first item learning javascript Let's make that our joke. Okay All right. So here's the text. It looks like a whatsapp conversation that somebody got unfortunately from their apartment Manager and of course, it's addressed to michael, which is extra funny. Hello michael. Your apartment has received the second complaint Uh noise from the apartment is the problem the dog whines apparently you leave one home and the dog gets bored Please address this the response from michael is hello. I don't have a dog. This is me learning javascript like screaming and yelling and kicking Oh dog whines, okay Uh, yeah That's pretty good. That's pretty funny. It could be like learning all sorts of programs. It could be learning python But yeah, a little extra special a little extra special there. Have you got your web pack working? Have you got your requires working? Uh, have you got your transpiler working yet man? That was me with like trying to relearn css Um, so first time I learned css. We didn't have all these like pre compilers and stuff Um, so css is a completely different ball game now. So yeah. Yeah. Wow. Yeah, it's crazy stuff Cool. Well, anyway, this is my joke for everyone. We've received a noise complaint. I'm sorry. I don't have a dog Awesome. Well, it was a fun episode. Thanks again. Yeah, sure was See you later. Bye"
  },
  "podcast_summary": "1. Python Packaging: The podcast discusses different approaches to handling dependencies in Python packages and applications, including the use of requirements.txt files and pyproject.toml files.\n2. Python Monkey: The podcast explores Python Monkey, a compatibility layer that allows Python developers to use JavaScript code within their applications, and vice versa.\n3. Quirks of Python Packaging Versioning: The podcast highlights the quirks of Python packaging versioning, including the use of v prefixes, epic versions, and implicit hyphens.\n4. Bear Type: The podcast introduces Bear Type, a runtime type checker for Python that enforces type safety at the function level, based on type hints.\n5. Visual Studio Code Update: The podcast discusses an update to Visual Studio Code that improves error-tolerant pytest discovery.",
  "podcast_guest": {
    "name": "Brett Ratner",
    "summary": "  Brett Ratner (born March 28, 1969) is an American film director and producer. He directed the Rush Hour film series, The Family Man, Red Dragon, X-Men: The Last Stand, and Tower Heist. He is also a producer of several films, including the Horrible Bosses series, The Revenant and War Dogs.Ratner got his start directing with music videos in the 1990s, and directed his first motion picture, Money Talks, in 1997. Overall, the films Ratner has directed have earned over $2 billion at the global box office. Ratner is the co-founder of RatPac Entertainment, a film production company. Ratner led RatPac's partnership with Dune Entertainment in September 2013 for a co-producing deal with Warner Bros. that included 75 films. RatPac Entertainment has co-financed 81 theatrically released motion pictures exceeding $17 billion in worldwide box office receipts. RatPac's co-financed films have been nominated for 59 Academy Awards, 25 Golden Globes and 43 BAFTAs and have won 25 Academy Awards, 8 Golden Globes and 24 BAFTAs. In January 2017, Ratner received a star on the Hollywood Walk of Fame for his contributions to the motion picture industry, located at 6801 Hollywood Boulevard.\\n\\n\",\n"
  },
  "podcast_highlights": "Summary:\n1. Python Bites episode 348 was recorded on August 15, 2023 and is brought by the hosts.\n2. The hosts discuss the challenge of managing package dependencies and suggest using alternative file formats such as requirements.toml or project.toml.\n3. They mention the Python Monkey project, which is a compatibility layer for Python that allows developers to use JavaScript code within Python applications.\n4. The hosts talk about the unique features of Python packaging and versioning, such as epic versions, local versions, and case insensitivity.\n5. Finally, they mention the BearType library, which is a runtime type checker for Python that enforces type safety based on type hints.\n\nThat's all for the summary! Let me know if there's anything else I can help with."
}